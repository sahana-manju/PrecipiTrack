# -*- coding: utf-8 -*-
"""Integration.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MExGHZziggD3VfumoGx-gh3wF5Z410dF
"""



"""# LOADING LSTM MODEL"""

import numpy as np 
import pandas as pd 
import matplotlib.pyplot as plt
import tensorflow as tf
from sklearn.preprocessing import StandardScaler

def pad_series(X, target_len=19):
    seq_len = X.shape[0]
    pad_size = target_len-seq_len
    if (pad_size > 0):
        X = np.pad(X, ((0,pad_size), (0,0)), 'constant', constant_values=0.)
    return X, seq_len

class Preprocess_LSTM():
  def __init__(self,data):
    self.data=data
  def handle_missing_values(self,test_raw):
    test_new = test_raw.fillna(0.0)
    self.data=test_new
    return self.data
  def scale_transform(self,test_new,sc):
    test_new.iloc[:,:23]=sc.transform(test_new.iloc[:,:23])
    self.data=test_new
    return self.data
  def create_dataset(self,test_new):
    INPUT_WIDTH = 19
    data_pd_gp = test_new.groupby("Id")
    data_size = len(data_pd_gp)
    X_test = np.empty((data_size, INPUT_WIDTH, 22))
    seq_lengths = np.zeros(data_size)
    i = 0
    for _, group in data_pd_gp:
      group_array = np.array(group)
      X, seq_length = pad_series(group_array[:,1:23], target_len=INPUT_WIDTH) 
      X_test[i,:,:] = X[:,:]
      seq_lengths[i] = seq_length
      i += 1
    self.data=X_test
    return self.data



"""# LOADING RIDGE REGRESSION MODEL"""

class Preprocess_RIDGE():
  def __init__(self,data):
    self.data=data
  def feature_selection(self,):
    col=['Ref_5x5_90th', 'RefComposite_5x5_50th', 'RefComposite', 'RefComposite_5x5_90th', 'Ref_5x5_50th', 'RefComposite_5x5_10th']
    train_data.drop(col,axis=1,inplace=True)
    self.data=train_data
    return self.data
  def handle_missing_values(self,test_raw):
    test_new = test_raw.fillna(0.0)
    self.data=test_new
    return self.data
  def scale_transform(self,test_new,sc):
    test_new=sc.transform(test_new)
    self.data=test_new
    return self.data
  def create_dataset(self,test_raw):
    test_data = test_raw.groupby('Id')
    minutes_past=test_data['minutes_past'].max().values
    ref         =test_data['Ref'].mean().values
    ref1        =test_data['Ref_5x5_10th'].mean().values
    #ref5        =test_data['Ref_5x5_50th'].mean().values
    #ref9        =test_data['Ref_5x5_90th'].mean().values
    #ref_c =test_data['RefComposite'].mean().values
    #ref_c1=test_data['RefComposite_5x5_10th'].mean().values
    #ref_c5=test_data['RefComposite_5x5_50th'].mean().values
    #ref_c9=test_data['RefComposite_5x5_90th'].mean().values
    rhohv =test_data['RhoHV'].mean().values
    rhohv1=test_data['RhoHV_5x5_10th'].mean().values
    rhohv5=test_data['RhoHV_5x5_50th'].mean().values
    rhohv9=test_data['RhoHV_5x5_90th'].mean().values
    zdr =test_data['Zdr'].mean().values
    zdr1=test_data['Zdr_5x5_10th'].mean().values
    zdr5=test_data['Zdr_5x5_50th'].mean().values
    zdr9=test_data['Zdr_5x5_90th'].mean().values
    kdp =test_data['Kdp'].mean().values
    kdp1=test_data['Kdp_5x5_10th'].mean().values
    kdp5=test_data['Kdp_5x5_10th'].mean().values
    kdp9=test_data['Kdp_5x5_10th'].mean().values
    id=test_data['Id'].mean().values
    test_new=pd.DataFrame({'Id':id,
                       #'minutes_past':minutes_past,
                          'Ref':ref,
                          'Ref_5x5_10th':ref1,
                          #'Ref_5x5_50th':ref5,
                          #'Ref_5x5_90th':ref9,
                          #'RefComposite':ref_c,
                          #'RefComposite_5x5_10th':ref_c1,
                          #'RefComposite_5x5_50th':ref_c5,
                          #'RefComposite_5x5_90th':ref_c9,
                          'RhoHV':rhohv,
                          'RhoHV_5x5_10th':rhohv1,
                          'RhoHV_5x5_50th':rhohv5,
                          'RhoHV_5x5_90th':rhohv9,
                          'Zdr':zdr,
                          'Zdr_5x5_10th':zdr1,
                          'Zdr_5x5_50th':zdr5,
                          'Zdr_5x5_90th':zdr9,
                          'Kdp':kdp,
                          'Kdp_5x5_10th':kdp1,
                          'Kdp_5x5_50th':kdp5,
                          'Kdp_5x5_90th':kdp9
                          })
    self.data=test_new
    return self.data



class RidgeRegScratch():
  
  def __init__(self, alpha=1.0, solver='closed'):
      self.alpha = alpha
      self.solver = solver

  def fit(self, X, y):
      X_with_intercept = np.c_[np.ones((X.shape[0], 1)), X]
      self.X_intercept = X_with_intercept
      if self.solver == 'closed':
          dimension = X_with_intercept.shape[1]
          # Identity matrix of dimension compatible with our X_intercept Matrix
          A = np.identity(dimension)
          # set first 1 on the diagonal to zero so as not to include a bias term for
          # the intercept
          A[0, 0] = 0
          # We create a bias term corresponding to alpha for each column of X not
          # including the intercept
          A_biased = self.alpha * A
          thetas = np.linalg.inv(X_with_intercept.T.dot(
              X_with_intercept) + A_biased).dot(X_with_intercept.T).dot(y)
      self.thetas = thetas
      return self

  def predict(self, X):
      thetas = self.thetas
      X_predictor = np.c_[np.ones((X.shape[0], 1)), X]
      self.predictions = X_predictor.dot(thetas)
      return self.predictions





"""# LOADING XGBOOST MODEL"""

class Preprocess_XGB():
  def __init__(self,data):
    self.data=data
  def handle_missing_values(self,test_raw):
    test_new = test_raw.fillna(0.0)
    self.data=test_new
    return self.data
  def scale_transform(self,test_new,sc):
    test_new=sc.transform(test_new)
    self.data=test_new
    return self.data
  def pca_transform(self,test_new,pca):
    test_new=pca.transform(test_new)
    self.data=test_new
    return self.data
  def create_dataset(self,test_raw):
    test_data = test_raw.groupby('Id')
    minutes_past=test_data['minutes_past'].max().values
    ref         =test_data['Ref'].mean().values
    ref1        =test_data['Ref_5x5_10th'].mean().values
    #ref5        =test_data['Ref_5x5_50th'].mean().values
    #ref9        =test_data['Ref_5x5_90th'].mean().values
    #ref_c =test_data['RefComposite'].mean().values
    #ref_c1=test_data['RefComposite_5x5_10th'].mean().values
    #ref_c5=test_data['RefComposite_5x5_50th'].mean().values
    #ref_c9=test_data['RefComposite_5x5_90th'].mean().values
    rhohv =test_data['RhoHV'].mean().values
    rhohv1=test_data['RhoHV_5x5_10th'].mean().values
    rhohv5=test_data['RhoHV_5x5_50th'].mean().values
    rhohv9=test_data['RhoHV_5x5_90th'].mean().values
    zdr =test_data['Zdr'].mean().values
    zdr1=test_data['Zdr_5x5_10th'].mean().values
    zdr5=test_data['Zdr_5x5_50th'].mean().values
    zdr9=test_data['Zdr_5x5_90th'].mean().values
    kdp =test_data['Kdp'].mean().values
    kdp1=test_data['Kdp_5x5_10th'].mean().values
    kdp5=test_data['Kdp_5x5_10th'].mean().values
    kdp9=test_data['Kdp_5x5_10th'].mean().values
    id=test_data['Id'].mean().values
    test_new=pd.DataFrame({'Id':id,
                          'minutes_past':minutes_past,
                          'Ref':ref,
                          'Ref_5x5_10th':ref1,
                          #'Ref_5x5_50th':ref5,
                          #'Ref_5x5_90th':ref9,
                          #'RefComposite':ref_c,
                          #'RefComposite_5x5_10th':ref_c1,
                          #'RefComposite_5x5_50th':ref_c5,
                          #'RefComposite_5x5_90th':ref_c9,
                          'RhoHV':rhohv,
                          'RhoHV_5x5_10th':rhohv1,
                          'RhoHV_5x5_50th':rhohv5,
                          'RhoHV_5x5_90th':rhohv9,
                          'Zdr':zdr,
                          'Zdr_5x5_10th':zdr1,
                          'Zdr_5x5_50th':zdr5,
                          'Zdr_5x5_90th':zdr9,
                          'Kdp':kdp,
                          'Kdp_5x5_10th':kdp1,
                          'Kdp_5x5_50th':kdp5,
                          'Kdp_5x5_90th':kdp9
                          })
    self.data=test_new
    return self.data

